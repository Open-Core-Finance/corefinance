import groovy.xml.*

dependencies {
    implementation project(":geocode")
    implementation project(":userprofile")
    implementation project(":common-feign-client")
}

processResources {
    doLast {
        println "Resource output dir: ${sourceSets.main.output.resourcesDir}"

        mkdir("${sourceSets.main.output.resourcesDir}/db/changelog/")
        file("${sourceSets.main.output.resourcesDir}/db/changelog/sql-changelog.xml").withWriter { writer -> {
            // Create MarkupBuilder with 4 space indent
            def xml = new MarkupBuilder(new IndentPrinter(writer, "    ", true))

            xml.doubleQuotes = true
            xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
            xml.databaseChangeLog("xmlns":"http://www.liquibase.org/xml/ns/dbchangelog", "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",
                    "xsi:schemaLocation":"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.11.xsd") {
                mkp.yield('\n')
                mkp.yield('\n    ')
                mkp.comment("AUTO-GENERATED FILE.  DO NOT MODIFY. This file is generated by gradle task")
                mkp.yield('\n')

                def listSubApp = [ "userprofile", "geocode" ]
                for (def subProject : listSubApp) {
                    def outDir = "db/changelog/${subProject}"
                    delete fileTree("${sourceSets.main.output.resourcesDir}/${outDir}").include('*')
                    def listSql = []
                    copy {
                        from "${project(":${subProject}").projectDir}/src/main/resources/db/changelog/sql"
                        into "${sourceSets.main.output.resourcesDir}/${outDir}"
                        eachFile { file ->
                            listSql.add("${outDir}/${file.path}")
                        }
                    }
                    listSql.sort()

                    mkp.yield('\n    ')
                    mkp.comment("SQL files from project ${subProject}")
                    listSql.each { include (file: "classpath:${it}") }
                    mkp.yield('\n')
                }
            }
        } }

        copy {
            from "${project(":userprofile").projectDir}/src/main/resources/"
            into "${sourceSets.main.output.resourcesDir}/"
            include "private_key.der"
            eachFile { file ->
                println("Copied [${file.path}]")
            }
        }
    }
}