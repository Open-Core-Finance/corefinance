buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath "io.spring.gradle:dependency-management-plugin:$springDependenciesManagementVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:latest.release"
        classpath "io.freefair.gradle:lombok-plugin:latest.release"
    }
}

plugins {
	id 'java'
    id 'java-library'
	id 'org.springframework.boot' version "$springBootPluginVersion"
	id 'io.spring.dependency-management' version "$springDependenciesManagementVersion"
    id 'jacoco'
    id "io.freefair.lombok" version "${lombokPluginVersion}"
    id "org.sonarqube" version "${sonarqubePluginVersion}"
    id 'maven-publish'
    id 'signing'
}

group = 'tech.corefinance'
version = "${internalCommonVersion}"

sourceCompatibility = javaCommonSourceCompatibility
targetCompatibility = javaCommonSourceCompatibility
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaCommonSourceCompatibility))
    }
}

repositories {
	mavenLocal()
	mavenCentral()
    maven {
        url = "https://s01.oss.sonatype.org/content/groups/public/"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootPluginVersion"
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

jar {
    archiveClassifier = ""
}

bootJar {
    enabled = false
}

dependencies {
    // Spring
    api ("org.springframework.boot:spring-boot-starter-tomcat")
    api('org.springframework.boot:spring-boot-starter-validation')
    api (group: 'org.springframework.boot', name: 'spring-boot-starter-web')
    api (group: 'org.springframework.boot', name: 'spring-boot-starter-aop')
    api group: 'org.springframework.data', name: 'spring-data-commons'
    api group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    // Spring doc
    api (group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: "$springDocApiVersion")
    // Common
    api group: 'commons-beanutils', name: 'commons-beanutils', version: "${beanutilsVersion}"
    api group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: "${jasyptVersion}"

    // security
    api group: 'com.auth0', name: 'java-jwt', version: "$javaJwtVersion"


    // Compile only
    compileOnly ('org.springframework.boot:spring-boot-starter-data-mongodb') {
        // Exclude because current version of snakeyaml have vulnerabilities. Need re-define.
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
    }
    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api'
    implementation group: 'org.hibernate.orm', name: 'hibernate-core'

    // Test
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
    }
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: "${powerMockitoVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${junitVersion}"
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
    reportsDirectory = layout.buildDirectory.dir("jacoco").get()
}

test {

    useJUnitPlatform()

    // report is always generated after tests run
    finalizedBy jacocoTestReport

    jacoco {
        classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = UUID.randomUUID().toString()
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    mustRunAfter test

    reports {
        html.required = true
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir("jacoco/html").get().asFile
        xml.outputLocation = layout.buildDirectory.file("jacoco/jacoco-report.xml").get().asFile
        csv.outputLocation = layout.buildDirectory.file("jacoco/jacoco-report.csv").get().asFile
    }

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ex/*', '**/pojo/*', '**/model/*', '**/dto/*', '**/config/*', '**/ZonedDateTimeProvider*',
                    '**/log/*'
            ])
        })
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar (type :Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier='javadoc'
    description='Creates a Javadoc Jar'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? "${artifactSnapshotUrl}" : "${artifactReleaseUrl}"
            credentials {
                username = "${artifactUsername}"
                password = "${artifactPassword}"
            }
            allowInsecureProtocol = true
        }
    }
    publications {
        group = group
        version = version

        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Microservice Common'
                description = 'Common module for microservices of Open Core Finance project.'
                url = 'https://corefinance.tech/'
                properties = [ "lib.name": "microservice-common" ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dbaotrung'
                        name = 'Trung Doan'
                        email = 'doanbaotrung@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:ssh://git@github.com:Open-Core-Finance/microservice-common.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Open-Core-Finance/microservice-common.git'
                    url = 'https://github.com/Open-Core-Finance/microservice-common'
                }
            }
        }
    }
}

publish.dependsOn(':microservice-common:build')
publish.mustRunAfter(':microservice-common:build')

signing {
    sign publishing.publications
}